// Code generated by bindata. (@generated) DO NOT EDIT.

// Package assets generated by bindata.
// sources:
// server/tls/snakeoil.crt
// server/tls/snakeoil.key
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AssetsServerTlsSnakeoilCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x95\xc9\x0a\xb3\x4c\xbf\xc4\xf7\x82\xf7\x70\xf6\x72\x70\x36\xc9\xb2\xb5\xd5\x38\xb4\x73\x34\xba\x73\x8a\x1a\x67\x8d\xd1\x78\xf5\x87\xe7\x79\xe1\xf0\xf1\xf2\xf5\xf2\x57\x50\x34\x7f\x8a\xaa\xff\xfd\xf3\x44\x59\xd5\xac\xff\x91\x64\x2f\xd0\x14\x4d\x02\x81\xfc\x97\xe2\x18\xd2\x34\x05\x42\x49\x02\x5f\x57\x02\xae\xbc\x43\x37\xd6\x8d\x31\xd1\xea\x6f\x6e\x01\x57\x56\x44\x17\xec\x01\x94\x4d\x04\x5a\x15\xd0\x0f\x59\xac\x91\x14\x86\xe8\x90\x4f\xe0\x89\x95\x15\xe2\x98\x08\xaa\x40\x6a\xad\x3a\x53\xbb\x3e\x63\xf5\x2d\x8d\xe4\x43\x7e\x03\xf7\x8f\x2a\x82\x31\x90\x22\x7e\xc8\xfb\xdb\x62\xf6\xd6\x37\x0b\xe4\x07\x12\xb5\xbf\x4e\xe0\x70\x4d\xa3\xe1\x37\x1c\x4b\x58\xfd\x9b\xfe\xf8\x77\xc6\x50\xfb\xbd\xce\x2d\x14\xa0\xdd\x7a\x83\x13\x41\xf7\x87\x4e\xb0\x47\x7f\xd8\xfb\x2f\x3b\xfe\x9f\xbd\x45\x84\xdc\x75\x97\xdc\x18\xe2\x58\xe8\xba\xaa\xbc\xeb\xe1\xe3\x94\x03\x24\xca\x7f\xfd\x25\x11\x19\x2e\xa3\xac\x69\x94\x7c\xf3\x9e\x9f\xe2\x40\xf6\x91\x08\xfe\xd1\x6a\xa4\x67\x7d\xf1\xcb\x98\x75\x8b\x99\xdb\x07\xc7\x90\xe7\xee\x72\x15\xc3\xd0\x75\xa1\x02\xd6\xd9\xec\xff\xf3\xd7\x92\x04\x1a\xed\xdf\xb7\x11\x45\x17\xc0\xaa\xd2\x1c\x00\x25\x09\xc7\x40\x35\x4a\x55\xa5\x89\xc0\x1a\xb7\xa7\x24\xec\x7a\x9a\x3b\x9a\x12\xcb\x8d\xa1\xa9\x6a\xdd\x35\x7e\x7d\xac\x3f\xfa\x4a\x9b\x3a\x25\x70\x49\x00\x59\xe0\xa1\xa0\xb9\xd9\x96\xbd\x7a\xed\xfd\x19\xe0\xd8\x88\x28\x29\xa4\x13\x0b\x0e\x8d\x33\xb1\xba\x66\x36\xaa\xc9\x33\x8a\x33\x51\x75\xa1\x97\x95\x4b\x4c\xe7\x49\x56\xf0\xfd\xa4\xea\x1b\x92\xa2\xf2\x40\xdc\x3a\x9b\x53\x4c\x05\x2f\x79\x6e\x6f\x1d\x8e\xdd\x23\xc3\xd1\x2b\xc2\x86\xc6\x75\x4f\x69\x72\xdf\x5c\xdb\x20\x88\x9e\x7c\xc6\xec\x9e\x67\x49\x65\xbe\x19\x56\xbe\xe7\xea\x2f\xeb\xc8\x43\xd5\xdb\xb4\x4c\x67\xd5\xfa\x2e\xfa\x48\x72\x5e\xe5\x9b\x38\x46\xbe\x83\x69\xa2\x0a\x18\x19\x8f\xde\x10\xa7\xe0\xce\x39\x1b\x14\xb2\xb6\xbb\xce\x86\x0b\x1c\xba\xdc\x3a\x21\xf1\x09\x75\x21\xbb\x4e\x89\xf5\x68\xde\xab\x82\xf5\x21\x1b\xd5\xa4\x40\xc7\xdc\x80\x63\xc2\x0a\xb7\xb5\xec\x19\xcb\xed\x3e\x43\xa7\xec\x25\x1f\xfa\xb4\xf9\x1a\xa7\xf0\x63\xb3\x25\x63\xf1\xaf\x6f\x29\x3f\x8a\xac\x62\x62\xb8\x5e\xca\xaf\x15\x87\x06\x41\x37\x54\xfb\x1e\xa9\x02\xb2\x10\xc7\x3e\x59\x5f\x97\x34\x6b\xbb\x64\x96\x6e\xaf\x23\xbf\xe7\xf4\xf1\xfe\xa8\xab\xce\x5f\xf6\xf5\x3a\x94\x8e\xc9\x95\x23\xf1\x55\x36\xc8\xbb\xef\xfc\x26\xfb\xaf\x73\x1b\xfc\xb2\xa7\x6a\x89\x07\x7a\xa5\xe0\xd8\xb2\x46\xa7\x16\xaf\xcb\xe5\xb1\x36\x9b\xa1\x72\x95\x5b\x40\xfa\x62\x12\x70\xac\x42\x69\xf6\xf2\x22\x7e\x6e\xd5\xe2\xc8\xba\x6d\x35\xd7\x58\x65\x4b\xcf\x73\x48\xf7\xd6\x76\x4f\xce\x89\x7e\x17\x1b\xc7\x92\xf7\xc5\x78\x92\x87\xb8\x7c\x7d\x5e\x2d\xa1\x35\x2f\x30\x5c\x1d\x93\x8a\x18\x4e\xd1\x49\xd2\xdf\xd6\x8b\xe8\x2b\xd4\x2b\xe7\xa1\x1f\xcf\x1f\xc8\x25\xd5\x8b\x56\xbd\x86\x22\x0e\x3f\x65\xfb\xdb\x9f\x3c\xe8\x7b\x64\xdf\x7b\xa1\x91\xa8\xfe\xbe\x17\xc5\x78\x3a\x66\x41\x48\x0e\x89\x2e\x4e\x7c\x3a\x1e\x6c\xa2\x98\x2c\xeb\x51\x52\x9a\xd9\x03\x55\x17\xdb\x54\x5f\x1b\x3f\xfd\x3b\x06\xf6\x7b\x16\x70\x2c\x10\xe3\x78\x22\xaf\x66\x9e\xcd\xaf\xf9\xd1\x6a\x02\xf4\x87\x84\x79\x59\xc5\xd3\x80\xbf\x66\x41\xbe\x1d\x70\x06\xbd\x55\x34\xba\xa7\xf3\x75\xcc\xb6\xdc\x9c\x0f\x82\xbf\x37\x25\x5f\x08\x92\xe1\xe1\x58\x35\x58\x34\xbf\xea\xbb\x6a\x68\x3f\xe6\xf2\xaa\x04\x13\x9c\x0d\xad\x46\x9b\x74\x26\x74\x7b\x9f\xdf\x9b\x5b\xb3\x63\xf8\xda\x44\x63\x50\x5e\x6b\x61\x3e\x06\x05\x54\x48\x04\xe0\x9f\x26\xc0\xb1\x7f\x75\x01\xfc\x9b\x70\x98\x96\x1d\x43\xf8\xde\xd5\x94\xf8\xc3\x92\xc4\x7c\xe3\xca\xb9\x6f\x3a\x96\x8a\xea\xec\x32\xcf\x0b\x2d\xc8\xf7\x07\x89\x7c\x37\xc3\xb1\xa1\x57\xd0\x21\xce\x41\xca\x88\x57\x0f\x26\x9a\xd6\x66\x17\x73\x6b\xef\xd7\x65\x05\xc5\xe3\x2a\x9e\x6d\xce\xfc\xbc\xe2\x3d\x82\x97\x8c\x50\xae\x03\xf2\x85\xa6\x7d\x4b\x9f\x1a\x9f\x6f\xa9\x11\xe2\x58\x53\x24\xca\x64\x3d\x7e\x1e\x61\xf0\x0f\x95\x94\x86\x4f\x2e\x7d\xf7\x33\x99\x38\x92\xac\x08\x33\x34\x6e\xb3\x03\x13\x46\xd4\x7b\x40\x3a\xc8\x13\xec\xa9\xf6\x76\x6f\x57\x89\x65\xf3\xcd\x87\xd4\xe0\xd8\x6f\xaf\x14\xa5\xb6\x3a\x07\x4d\x4e\xc2\xdd\xbe\xab\xd2\x93\x2e\x05\x38\xbd\x37\xa7\xe4\x99\x02\xef\xc3\xb3\xa7\x95\x59\xcd\x3d\xa0\x95\x2a\x70\xc8\x9b\x49\xdf\xb5\xa9\xcd\x5e\xa3\xe2\x06\x82\x87\x63\x93\x48\x86\x71\x79\xb5\x09\xb5\x5f\xf6\xd4\x64\x3b\xc2\xbc\xa6\x36\x75\xd1\x3d\x44\x6c\x94\x6d\x58\xce\x61\x57\x47\x54\xc9\x97\xc7\x50\x35\xd1\xd6\x3d\xa7\x41\xbb\x83\x67\x7c\x04\x21\x72\xaf\x21\x8e\xd1\x5a\xbc\x7d\xbe\xb7\x2c\xd6\x49\x22\x00\xbf\x9b\x71\x9c\x39\xe7\xb2\xac\x41\xf0\xf3\xd7\xe7\xaf\xaa\x04\xde\xb6\x42\x53\xd6\x70\x6f\x9b\xc0\x75\xb2\xfa\x11\x69\xfe\xf8\x66\xe8\x32\xd1\xe9\x3a\xc3\xb1\x84\x13\x33\x89\x3f\xc9\xf8\x7a\x5a\x19\x4a\x47\x0a\x48\x0a\xe5\xf6\xdd\xf0\xec\x3e\x54\xbc\xb4\xef\x36\x4f\xdc\x6d\x2e\x97\x73\x92\x84\x18\xed\x2c\xf3\x5d\xcb\xde\x93\x73\x9e\x7f\xde\x1e\x2e\xc2\xb1\x3e\xcc\x06\x98\xd6\xdc\xf1\x73\x10\xf1\xb3\xb4\x8a\xdc\x8c\x7b\x18\xc4\xba\x40\x70\xc1\xe7\x13\xc9\x13\xad\xab\x5e\xea\x30\xb2\x1d\x2f\xd4\x4f\x2d\xb9\xa7\xa2\x2c\x86\xe6\xdc\x19\xd8\x81\x09\xe1\xd8\x60\xbd\x66\x8f\x40\xaf\xe3\x16\x25\x3e\x3b\x08\xca\x16\x39\x6a\xf4\x80\xe2\xaf\x64\x5e\xc5\x61\xbf\xa3\x9b\xbe\xe7\x24\xa1\x43\x8f\x15\x57\x5f\xe0\xcd\xee\x74\x96\x55\x90\xae\x41\x6e\x0d\x03\xc4\x31\xb9\x88\x74\xae\xed\xe2\x33\x6a\x37\xbf\x78\x34\x21\x2d\x3f\xb3\x55\xa4\x57\x5f\x33\xfa\xc7\x56\x30\x2f\xee\xab\x6f\xf6\xdc\x89\x6b\xe5\x5f\xc9\x3e\x38\xde\x2d\xcd\xb0\xdb\x33\xb5\x6e\x67\x6a\x09\x38\x06\x6e\x39\x8a\x5c\x8d\x41\xd9\x98\x19\xd4\x5d\x5e\xda\x96\x72\x7f\x56\xf0\x09\x03\x63\xeb\x65\xb9\x1d\xc9\x9c\x69\x3f\xeb\x70\xed\x96\x42\xcf\x8d\x59\x2a\xdd\x9b\x6c\xec\x93\xb0\x50\x66\xff\x99\x70\xec\xef\xf8\xc9\x16\xfc\x2f\x83\xf8\x7f\x01\x00\x00\xff\xff\x1f\x9e\x23\x57\x2e\x07\x00\x00")

func AssetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_AssetsServerTlsSnakeoilCrt,
		"../assets/server/tls/snakeoil.crt",
	)
}

func AssetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := AssetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../assets/server/tls/snakeoil.crt", size: 1838, mode: os.FileMode(438), modTime: time.Unix(1706257096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _AssetsServerTlsSnakeoilKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x97\xb7\x0e\xa4\x00\xb2\x00\x73\x24\xfe\x61\x73\xf4\x84\x19\x6c\xf0\x02\xbc\xf7\x9e\x6c\xf0\x83\x67\x70\x03\x5f\x7f\xda\xd5\xa5\xd7\x69\x67\xd5\x15\x74\xfd\xdf\xdf\xe1\x44\x59\xb5\xfe\x78\x3e\xfb\xc7\xf1\xd4\x88\x0d\xc4\x3f\xba\x98\xfe\xdb\x80\x80\xa9\xaa\x9a\xce\xaa\x1c\xcb\xea\x3c\xdb\x88\x2c\xf6\x21\x0a\xe3\xcb\x0e\xcb\x45\x37\x51\xe3\xab\x73\x93\xbe\xe5\x58\xd3\x15\xf9\x31\x92\x27\xdc\xa6\xe0\xdb\x0e\xa6\x53\x70\xe2\xcf\x36\x10\x1c\x01\x01\xf2\x27\xbb\x65\x69\x37\x8f\xab\x25\x51\x8f\xd8\x95\x0a\x4d\x45\xdf\x1c\x6a\x7a\x4e\x69\x08\x4d\xbe\x84\x0c\x24\x27\x90\x93\xe3\x40\xac\x6d\xd5\xbe\x82\x5c\x5a\x46\x89\xcf\xe7\x9e\x8f\xa1\xf3\x40\xc0\xa2\xfd\x35\xc0\xc2\x32\x9d\xe9\x51\xc0\x71\xf3\xfb\x70\xdf\x04\xe6\x09\x16\xff\x52\x64\xce\x94\x5d\xcd\xfd\xf6\x91\x3d\x9c\xbc\x70\xcb\x2b\xd7\x8e\x04\x16\xd3\xd1\x5b\x88\x75\x4e\x31\x68\x1b\x41\xa0\x83\x5b\x99\x53\x4f\xc8\xb2\xc7\xc9\x43\xac\x74\xf1\xd3\x59\x1e\xcc\xba\x81\x70\x67\x39\xfc\xe4\x9e\x17\x96\x85\x23\x92\x4c\x96\xc1\xc0\xdf\x27\x14\x87\x51\x33\xbc\xbf\x3c\xf7\x2a\x55\xa7\x7c\x83\x80\x02\x7f\xa3\xee\x53\xaf\x97\x4d\xfe\xc8\x3c\x45\xf9\x18\xab\xc2\x84\xa3\x86\xc8\x08\x77\xe8\x33\xc4\x08\x55\x52\xe9\x6b\x80\x18\xdc\xf3\xd0\x43\xc8\x1a\xfb\xd9\x49\x1a\x6d\xc3\x2f\x15\x1b\xbe\x0f\x02\x76\xe7\x21\x4e\x61\xa3\xc7\x5b\xa2\x92\x82\x10\x98\x7d\x25\x60\xe9\x2a\x9f\x44\xb6\x91\xf7\x35\x4d\x27\xff\xdc\x25\x4e\x9f\x2d\xd9\x91\x74\x8c\x3b\x03\x6f\x3d\x88\xa7\xc1\x36\x59\x6a\x64\xee\x83\x80\x68\xf4\xec\xc8\xc6\xc7\x2f\x37\xdb\xcf\x7d\xee\xfe\xad\xe3\x73\xfe\xe1\x38\xc4\x49\xb6\x13\xb7\x3f\x5c\xa8\x2f\xd2\x0f\x6d\x2b\x92\xdf\x68\xb7\xc7\x31\xe3\xd7\xe4\x25\x21\x89\x30\x23\x60\x7e\x04\x02\x75\xc3\xe4\xc6\x46\x8c\xce\xb6\xd4\xb0\x28\x1f\x8c\xd1\x67\xb8\x89\xad\x9b\x15\x5f\xf4\xe9\xe5\x79\x13\x4e\x30\xa3\x93\xcf\x26\xa9\x89\xc7\x3c\xbd\xa5\x7d\x56\xc4\x69\x47\x0e\x0e\x33\xd9\x08\x40\x80\x92\xb4\x6f\x95\x23\x3c\x3b\x71\x29\x5e\xe5\xab\x6a\xf8\x69\xcd\xa1\x58\x67\xd2\xfb\x0b\x57\x61\xfa\xd9\x98\xce\x64\x44\x5b\xcb\x3a\x86\x94\x1b\x35\xd6\x17\x91\xe7\xa3\x86\xf2\xdf\xe2\x57\x1d\x41\x00\x6a\x4d\xd2\xfe\x2e\xa6\xd4\x7e\x26\xf8\xda\x7f\xc7\x02\x2d\xbe\xdb\xcd\x96\x5e\x4e\x19\x8d\xa2\xc5\xec\xe8\xfa\xf6\x53\x09\xa7\xf9\xc6\xa4\x10\x5e\xe5\xfa\xbd\xdb\x83\xb8\x8e\xaf\x42\xf5\x95\x06\x02\xd4\xf0\x9a\xd5\x45\xe6\x8b\x57\x32\x5e\x13\x9b\xce\x9d\x91\xef\x90\x30\x6f\x82\x6d\x84\xd9\x1b\x37\xac\x29\x76\xab\xd5\x26\x78\xa5\x6a\x23\x08\x17\xd7\x22\x82\x7e\xc8\xee\x17\x21\xcf\x5e\x22\x0b\x02\xac\xfb\xd7\x66\x2e\x27\xbd\x83\x36\x90\x66\x0f\xb9\xe9\xa5\xce\x8a\x59\xbf\x62\x47\x87\x79\xba\x32\xda\x60\x7d\xbe\xa9\x1a\xbf\x62\x29\xbd\x5a\x1c\x33\xb7\x78\x7c\xb1\x95\x8d\x91\x96\xef\xbb\x20\x60\xcb\x1e\x9f\x6c\xf6\x0f\x6d\xb5\x1c\xea\x2e\x64\xcf\x4c\x23\x44\xbf\x16\x1f\x70\xe3\x3d\x73\x6a\xf7\xe1\xc8\x0e\xc1\x8b\x14\xe3\x0a\xc8\x40\xe0\x3a\xe6\xb1\x17\x69\x0b\xe6\xf7\xb5\x69\x92\x87\x80\xc0\xaa\xf6\xaa\xa4\x14\x41\x59\x2f\xd2\x21\xae\xb8\x8f\xfe\x04\x1c\x96\xf7\x30\x0b\xa3\xe1\xa4\x3a\xc4\xd0\x65\x3a\x47\x52\x98\x51\x3a\xd6\x9b\xa8\x35\xbf\x60\x5d\x6b\x2b\xa5\xe2\x5b\x39\x6f\x45\x10\xc0\x9b\x7e\x27\xb8\x8e\x3a\x42\x9a\x6a\xa9\x4e\x61\xaf\xa5\x27\xe1\x72\xb8\x90\xaa\x4f\x11\x24\x87\x9b\xc3\x37\x4b\x03\x26\x74\xf4\x43\x6f\xd0\x82\x93\x2b\xb5\x29\xd5\x41\xfb\x0e\x5a\xae\x7b\x0c\x02\xfc\x53\xbd\x06\x5d\x0b\x84\x49\xcf\x0d\x8e\xe9\x7a\xa1\xa7\x55\x1e\x55\x9b\xbc\x33\x90\xda\x54\x13\xe4\xc2\xe5\x07\x51\x3c\xad\xc6\x91\x80\xf8\xcc\xf2\xf1\xf7\x5e\xb0\x14\x4e\xfc\x78\x97\x24\x08\x5c\xa4\x6b\xae\x22\xac\x59\xd5\x16\xd4\xd2\xfa\x5b\xbd\x27\xe3\xae\x40\x43\xa1\x5f\x9f\xf4\xbe\x34\x4a\x6d\xc6\x98\x45\xfd\x1b\xc5\x7d\x7e\xde\x07\x62\x28\x64\xb0\xf7\xf2\xa8\x9c\xf5\x38\x91\x30\x08\xa8\xb4\x3a\x0e\xaa\x77\x2b\xb2\x1d\x46\xca\x26\xb2\x1e\x5d\x50\x6f\x81\x29\xdf\x0d\x62\xe4\xc9\xd8\xdd\xf3\x50\x7f\x26\x5a\x98\x2f\xf4\x85\xc0\xf2\xab\x0d\x92\x74\x12\xc4\xe0\x47\x92\x3d\xea\x05\x20\xc0\xb5\x64\x2f\x88\xe9\x79\xfc\x4e\x69\xed\x93\x54\xf7\xd8\x83\x38\x50\xf4\x74\x59\xe6\x28\xd3\xd5\xc2\x3f\x50\xbb\xbb\x98\x6d\xa7\xb6\xa8\x5b\x09\xad\xff\x6e\x82\xc4\xbe\x49\x53\xd2\x84\x79\x07\x20\x50\x05\x06\x2e\x8c\x2d\x4c\x6a\x54\xb4\xc7\x32\x3e\x59\x98\x4c\x2f\x53\x47\x18\x0d\xc3\xb8\x74\xfd\x88\x92\x3b\x4a\x86\x54\xe8\x48\xaf\x5d\xca\x81\xe0\x8b\xf6\x5e\xbf\x8a\x01\x1d\x8a\x52\x12\x01\x08\xe8\x76\xed\xb0\x5f\x64\x09\xf3\xea\xc0\xb6\xa8\x64\x8a\xb6\x11\x5a\x56\x08\x45\x14\xa6\x53\xa7\xf5\xf9\x4d\x39\x4a\x13\xb7\x66\x7c\x17\xf8\x2c\x12\x57\x5d\x43\x17\xd9\xe0\x97\xf0\x7a\x29\xe8\x09\x02\x2d\xf2\x66\x61\x8e\xa0\xb1\x05\xe3\x65\x69\x91\x67\x75\xd2\x6b\x49\x3f\xc3\x3c\xdd\xb1\xa9\x12\xb2\xcc\xbd\x9b\x31\xe5\x43\xe5\xbe\x56\xeb\xe7\xfe\x73\xd8\x15\x59\x58\x41\x4c\x5e\x4b\x23\x10\x88\x3c\xcf\x38\xea\xac\x7f\x5e\xf5\xc2\x43\x57\x00\x15\xf3\x9a\x37\xc7\xf5\x0d\xb0\x7c\x89\xb8\xc3\x2a\xcf\x5b\xd0\x53\xb5\xcf\x0b\x5f\xd8\xd5\xc8\xda\x6c\x18\x5d\x50\x98\x97\xe7\xef\x28\x0c\x03\x08\xf4\x68\x67\x49\xad\x07\x0d\x2b\xc7\xd1\xae\x5b\xe7\x68\x56\xed\xce\xdc\xfe\x1e\xc7\x9a\x0a\xe7\xa3\xdd\x4b\xce\x84\x9f\xf3\xa0\x64\x19\x35\xad\x50\xd1\xc2\xaa\x90\x76\xfa\x50\x83\x22\x65\x5e\x1b\x08\x84\x8d\xc7\x45\x1b\xbf\x18\x4d\xe8\x50\xbe\x44\x8e\xa8\xb9\x1c\x18\xf7\x4e\x5c\x78\x13\x4d\xba\x4c\x79\x7f\xdc\x71\xe9\xfd\xa3\x8c\x18\x41\x0a\x75\x31\x86\x2a\x1b\xf9\x64\x2e\xe0\x6e\x0b\x42\x13\x04\x3e\xbf\x34\x30\x89\x2f\x11\xc6\x09\xd7\x0e\x28\x43\x1a\xf5\x01\xc5\x5d\x30\xce\x3f\xb9\x91\xaa\xe0\x92\xe8\x1f\x7a\x1d\x33\x35\xba\xa7\x53\x7f\x3f\xcb\x19\x26\x70\xde\xc9\x1e\x3e\x13\x9a\x6b\x5f\x20\x80\xaa\x48\xa2\xa3\xaf\xfb\xdb\x4a\xbd\xc8\xaa\x11\x89\x4e\x0a\x27\x7f\xee\x76\xd4\xfc\xd6\x79\xfb\x2a\x76\x08\x47\xf9\x43\xb2\xbe\x3e\x42\xd5\x44\x43\xe9\x5c\xab\x35\xde\x3a\x36\x78\x1b\xa3\x1d\x83\x40\x42\x0d\x22\xb2\x5a\x0d\x45\x0c\x9b\xf7\x5f\xce\xaf\xa0\x58\x9b\xf3\xb3\x6d\xcc\x1b\xb7\xaf\x2f\xc2\xbd\x9b\xa1\xb2\xf3\x70\x0a\x4c\xe9\xe9\xe9\xbc\x59\xaa\xd1\x2a\x9f\x0f\x4e\x55\x32\x08\x50\x3c\x41\x61\xf1\x8f\x96\x37\x32\x69\xac\xdc\xc6\xe8\x61\x11\x11\x47\xa0\xf4\x10\xf6\xce\xfd\x45\x5e\x0e\x33\x3e\xf2\xc7\x41\xcc\x57\xf6\xc5\x5b\x1a\x65\x6b\xe3\xac\xf7\xd9\x34\x37\xf2\xde\x7b\x10\xb8\x14\xcd\x2e\x77\x27\xe4\xb3\xf5\x9c\xf2\xe1\xd4\x6d\x15\x47\x98\x49\x9e\xe6\x50\x80\x5e\x53\xad\xc0\xeb\xaa\xf4\x78\x66\xbc\xea\x09\x3f\x95\xfc\x77\x99\x73\x99\xd5\x76\xe2\x7d\x15\xac\xd5\xbe\x20\x20\x46\x2b\x3b\x4d\xd5\xef\xc3\xf8\x88\x96\x6b\xda\xaf\x2c\xfc\x81\x33\x55\xe2\x74\x4d\x5d\x36\xf8\x8e\xc0\x78\x6c\xac\x0b\x09\x4a\x3c\xf3\x90\x68\x3a\xbf\x6a\x8d\x4a\x8a\xfc\x75\xb7\xf7\x49\x7f\x40\x60\x49\x14\x25\xcb\x18\x57\x17\xa9\x4a\xa6\xc8\xd0\x86\x44\x59\x7f\xe8\x66\x7a\x5d\xb1\x7e\xb4\x84\x92\x2c\x2f\x65\xbe\xf5\x4f\xd9\x3c\xc9\xee\xa8\xf9\x41\xd7\x25\x1e\x3e\xc9\x00\x73\x81\x29\x15\x20\xd0\xc5\xac\x8c\xa4\xc5\x36\x12\x65\x30\xe7\x2e\x92\xce\x48\x52\x75\x07\xa1\x6c\x84\xcb\xef\xea\x9e\x52\x36\x2b\x6d\x0a\xdc\xfc\xa3\xcc\x71\x7c\xc0\x33\x61\x62\x75\x36\x73\x65\x4b\x9a\xcf\x20\x20\x94\x33\xdb\xfb\x13\x2b\x1a\x97\xa2\xcd\x23\xf6\x6b\x7c\xa8\x42\x70\x5c\x41\xbd\xfe\x24\x0f\x2a\xb3\x31\x15\x2d\xb4\x40\xa9\xa8\x5a\xe7\xdb\xb2\x4f\xad\xc7\x88\xb1\x61\x24\x10\x57\x80\xd0\x1a\x04\x6a\x0f\xaf\x35\x46\x46\xf9\x6b\x70\xc5\x45\x21\x9f\xaf\xbb\x52\x5c\x3e\x5d\x79\x8b\xab\x76\xf2\x35\xcb\x79\x95\xf3\xb9\xdb\x57\x69\xe8\xb2\x8d\x59\x05\xab\x99\xeb\x9f\x1e\xb2\x9c\xfa\x09\x5f\x3a\x08\x2c\xa5\xb8\xa4\x8b\x25\xf8\x9e\x9d\xdd\xa1\x51\xe6\xf4\xc0\xec\xc7\x41\x68\x5e\x75\x15\x47\xdb\xb8\x4d\x35\x60\x7d\x8f\x7d\xed\xc7\xa4\xb9\x05\x3a\x16\x4a\x3f\x52\x6e\x9c\x6e\x57\xe3\xab\x70\x06\x81\x0a\x21\x6e\x78\xab\x69\x74\x3b\xa1\x46\xfe\x2e\xdc\x63\xec\xd7\x47\x7c\x9e\x9f\x84\x15\xb0\xb4\x4e\x93\x7c\xfd\xa4\xf3\x95\xbd\xb8\x6f\x1f\x8d\x44\x95\x37\x73\x95\xc1\x03\xc2\x26\xfd\x63\x0e\x3c\x08\xbc\xae\x64\x76\x72\x49\xdb\x7e\x52\xf6\x96\x35\xea\x71\x30\xac\xe4\x04\xb9\xb1\xf0\x39\x32\x27\xfe\xda\x96\x17\xab\x87\x16\x7d\xd0\x25\x3d\x76\xe1\x20\x94\x1f\x26\x53\x88\x80\x27\x13\xe9\xe1\x02\x10\x20\x1e\x56\x62\x67\x95\x63\x25\xbe\x1b\x92\xb1\x40\xcc\x3a\x42\x18\xf2\xc3\xa5\xe9\x9d\x20\x6f\x2b\x58\xe0\xc9\xc5\x6f\xc3\x2b\x26\x4a\xad\xc7\xad\x4d\x85\x56\x86\xce\x79\xaa\x7b\x5d\x32\xf7\x19\x04\x50\x1a\x65\x1a\xe5\xfd\x96\x7f\xb1\xb9\x4b\xa1\x54\x43\xb1\x6d\xa6\x64\xaa\x33\xdc\x45\xc5\xa9\xec\xeb\x8a\x16\x27\xc6\x3a\x72\x16\xca\x87\x2d\xa5\x44\x2b\x72\x9a\xfb\x9d\x90\xe7\x1e\xc1\xae\x0b\x02\x61\xd8\x50\xe3\x7c\xbe\x0f\x84\x3b\x0e\x65\xa1\xa7\x45\x14\xdc\x36\x08\xed\xd0\x92\x11\xdb\x82\x70\x3e\x4f\xb3\x57\xa9\xe7\xf1\xce\x66\x51\xa5\x58\xef\x42\xc6\x69\x1f\x5d\x2f\x31\x73\x0c\xf4\x00\x81\xf0\x13\x06\xdb\x1e\x58\x2b\x93\xfa\x4d\xaf\x42\xa9\xd4\x5c\x15\xcf\xca\xb2\x53\xcc\x87\xc7\xa1\x12\x5f\xae\xc2\xe3\x28\x7d\x71\x46\x70\x42\x57\x75\xe6\x86\x6a\xb0\xf9\xb2\x09\x5d\x53\x12\x23\x20\x20\x77\x74\xf5\xa2\xb3\x42\x3b\x63\x15\xc1\x47\x67\x16\x10\x87\x89\xdf\x46\x0b\xfb\x38\xbe\x40\x9e\x38\x74\x21\xb3\xcb\xda\x90\x3c\xab\x81\x8d\xd6\x38\x14\x77\x1d\xdd\xc2\xf3\x6d\xa1\x86\xd5\x1c\x10\x78\xd2\x95\x3c\xd8\xa4\x78\xac\xab\x86\x43\x09\xee\xc8\x99\xd7\x68\xec\x1d\x61\x0f\x12\x5d\x22\xdf\x34\x22\xc7\x6a\xcd\x1b\xd3\x73\x74\x3e\x2d\xc3\x74\xe9\xe8\x18\xd1\x5d\xa4\x39\xbb\x3f\x18\x01\x04\xda\x20\x5a\x1e\x68\x93\x8e\x26\x3b\x52\x42\x78\x06\x66\x73\xe4\xe0\x15\x26\x72\x97\x65\xf4\x22\x8b\xf2\x62\x38\xae\x8e\xa5\x0e\x71\x17\x50\xd5\xf2\x53\xf3\xaa\x9c\x3d\x89\x90\xcd\x09\x3d\x22\x06\x01\x94\xea\x3e\xb9\x89\x69\xa9\xd4\x7b\x8c\xa7\xf1\x3c\x4b\x17\x10\x84\xd9\xd7\x2f\x0b\x22\xad\xf0\x85\xb0\x57\x64\xaa\x58\x06\xc2\x35\xf2\xc7\xd6\xd8\x58\xa6\x68\xf1\xf9\x7c\xac\x35\x13\x6f\x1e\x01\x01\x6f\x4b\x75\xe7\x5d\x92\x15\x52\x4d\xe9\xee\x9c\xe9\x30\xf1\xe9\x97\xa2\x52\x5c\xb7\xc8\x31\x24\xec\xfd\x65\x3f\xab\x5c\x39\x38\x04\x95\xa1\xf9\x4c\x06\x86\x9e\x39\x76\x8d\x36\xf9\x53\x8c\xbf\x3f\x8c\x79\xbd\xc9\x8b\xaa\xd5\x24\xb5\x58\xfb\xe0\x7b\x44\x36\xab\xf4\xf1\x95\x2c\xa0\xb2\xf4\xde\xc3\xb0\xfd\x7c\x82\x28\x57\xb2\xe3\xfd\x68\x1e\xa9\xdd\x1e\x75\xd7\xaf\x72\xea\x7a\xa7\xf6\x22\xa5\x02\x81\xd5\xd8\x74\x35\xb2\xf2\x3b\x7e\xdf\xf3\x42\xa2\xb5\x95\xc5\xb5\x85\x4b\x8d\x61\x8e\xa1\xf0\xf0\x96\x25\x3c\xcc\x26\x25\x08\xa3\x8d\xa8\xfb\x16\x67\x48\x38\x26\x4a\xb8\x68\x7f\xfb\x7f\x10\xf8\x17\x29\xa2\x25\xfc\x8f\x78\xf9\x4f\x00\x00\x00\xff\xff\x23\x79\x2c\xb9\xde\x0c\x00\x00")

func AssetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_AssetsServerTlsSnakeoilKey,
		"../assets/server/tls/snakeoil.key",
	)
}

func AssetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := AssetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../assets/server/tls/snakeoil.key", size: 3294, mode: os.FileMode(438), modTime: time.Unix(1706257096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../assets/server/tls/snakeoil.crt": AssetsServerTlsSnakeoilCrt,
	"../assets/server/tls/snakeoil.key": AssetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"server": &bintree{nil, map[string]*bintree{
				"tls": &bintree{nil, map[string]*bintree{
					"snakeoil.crt": &bintree{AssetsServerTlsSnakeoilCrt, map[string]*bintree{}},
					"snakeoil.key": &bintree{AssetsServerTlsSnakeoilKey, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
